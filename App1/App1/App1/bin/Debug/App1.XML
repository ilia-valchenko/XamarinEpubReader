<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App1</name>
    </assembly>
    <members>
        <member name="T:App1.App">
            <summary>
            The application class.
            </summary>
        </member>
        <member name="F:App1.App.bookDirectoryName">
            <summary>
            The name of the directory which will contain eBooks.
            </summary>
        </member>
        <member name="F:App1.App.filer">
            <summary>
            The filer class. 
            </summary>
        </member>
        <member name="F:App1.App.directory">
            <summary>
            The directory class.
            </summary>
        </member>
        <member name="M:App1.App.#ctor">
            <summary>
            Initialize the instance of <see cref="T:App1.App"/> class.
            </summary>
        </member>
        <member name="M:App1.App.OnStart">
            <summary>
            This method calls when the application starts. 
            </summary>
        </member>
        <member name="T:App1.Infrastructure.Directory.IDirectory">
            <summary>
            This interface exposes methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="M:App1.Infrastructure.Directory.IDirectory.CreateRootFolder(System.String)">
            <summary>
            This method creates a folder in a root directory.
            </summary>
        </member>
        <member name="M:App1.Infrastructure.Directory.IDirectory.DoesDirectoryExist(System.String)">
            <summary>
            This method determines does the directory exist.
            </summary>
            <returns>Returns true is directory exists.</returns>
        </member>
        <member name="T:App1.Infrastructure.ISQLite">
            <summary>
            This interface is to determine the location of the database file.
            </summary>
        </member>
        <member name="M:App1.Infrastructure.ISQLite.GetLocalDatabaseFilePath(System.String)">
            <summary>
            Returns path to the platform-specific local database file.
            </summary>
            <param name="sqlFilename">The name of a database file.</param>
            <returns></returns>
        </member>
        <member name="T:App1.Infrastructure.IScreenHelper">
            <summary>
            This interface should helps to detect the width and the height of user's device screen. 
            </summary>
        </member>
        <member name="P:App1.Infrastructure.IScreenHelper.ScreenWidth">
            <summary>
            The screen width in density-independent pixels.
            </summary>
        </member>
        <member name="P:App1.Infrastructure.IScreenHelper.ScreenHeight">
            <summary>
            The screen height in density-independent pixels.
            </summary>
        </member>
        <member name="F:App1.Models.BookViewModel.bookCoverImage">
            <summary>
            The book's cover image.
            </summary>
        </member>
        <member name="F:App1.Models.BookViewModel.pages">
            <summary>
            The collection of book's pages.
            </summary>
        </member>
        <member name="P:App1.Models.BookViewModel.Pages">
            <summary>
            Readonly property which returns the collection of book's page.
            </summary>
        </member>
        <member name="P:App1.Models.BookViewModel.NumberOfPages">
            <summary>
            The number of pages.
            </summary>
        </member>
        <member name="P:App1.Models.BookViewModel.BookCoverImage">
            <summary>
            The book's cover image.
            </summary>
        </member>
        <member name="M:App1.Models.BookViewModel.#ctor(App1.EpubReader.Entities.EpubBook)">
            <summary>
            Initializes the instance of <see cref="T:App1.Models.BookViewModel"/>
            </summary>
        </member>
        <member name="T:App1.Models.ApplicationPages.BookPages.BookPage">
            <summary>
            This class represents a default book page. 
            </summary>
        </member>
        <member name="T:App1.Models.ApplicationPages.BookPages.BookTextPageViewModel">
            <summary>
            This class represents a default book page which contains text content.
            </summary>
        </member>
        <member name="M:App1.Models.ApplicationPages.BookPages.BookTextPageViewModel.#ctor(App1.EpubReader.Entities.EpubChapter)">
            <summary>
            Initialize an instance of <see cref="T:App1.Models.ApplicationPages.BookPages.BookTextPageViewModel"/>
            </summary>
            <param name="chapter">The book's chapter.</param>
        </member>
        <member name="T:App1.Models.ApplicationPages.MainPageViewModel">
            <summary>
            The home page of the application.
            </summary>
        </member>
        <member name="F:App1.Models.ApplicationPages.MainPageViewModel.stackLayout">
            <summary>
            The stacklayout panel. 
            </summary>
        </member>
        <member name="F:App1.Models.ApplicationPages.MainPageViewModel.gridLayout">
            <summary>
            The grid layout panel.
            </summary>
        </member>
        <member name="F:App1.Models.ApplicationPages.MainPageViewModel.books">
            <summary>
            The collection of books.
            </summary>
        </member>
        <member name="M:App1.Models.ApplicationPages.MainPageViewModel.#ctor(System.Collections.Generic.IList{App1.Models.BookViewModel})">
            <summary>
            Initialize an instance of the <see cref="T:App1.Models.ApplicationPages.MainPageViewModel"/>
            </summary>
            <param name="books">The collection of books.</param>
        </member>
        <member name="M:App1.EpubReader.EpubReader.OpenBook(System.String)">
            <summary>
            Opens the book synchronously without reading its content. Holds the handle to the EPUB file.
            </summary>
            <param name="filePath">path to the EPUB file</param>
            <returns></returns>
        </member>
        <member name="M:App1.EpubReader.EpubReader.OpenBookAsync(System.String)">
            <summary>
            Opens the book asynchronously without reading its content. Holds the handle to the EPUB file.
            </summary>
            <param name="filePath">path to the EPUB file</param>
            <returns></returns>
        </member>
        <member name="M:App1.EpubReader.EpubReader.ReadBook(System.String)">
            <summary>
            Opens the book synchronously and reads all of its content into the memory. Does not hold the handle to the EPUB file.
            </summary>
            <param name="filePath">path to the EPUB file</param>
            <returns></returns>
        </member>
        <member name="M:App1.EpubReader.EpubReader.ReadBookAsync(System.String)">
            <summary>
            Opens the book asynchronously and reads all of its content into the memory. Does not hold the handle to the EPUB file.
            </summary>
            <param name="filePath">path to the EPUB file</param>
            <returns></returns>
        </member>
        <member name="T:App1.EpubReader.Interfaces.IFiler">
            <summary>
            This interface represent the level of abstraction which provides basic file operations. 
            </summary>
        </member>
        <member name="M:App1.EpubReader.Interfaces.IFiler.DoesFileExist(System.String)">
            <summary>
            This method checks if the file exists.
            </summary>
            <param name="filepath">The path for a file.</param>
            <returns>Returns true is a file exists.</returns>
        </member>
        <member name="M:App1.EpubReader.Interfaces.IFiler.GetFilePath(System.String)">
            <summary>
            This method returns the full path of the file.
            </summary>
            <param name="filename">The name of the file with extension.</param>
            <returns>Returns string which represents the full path of the file.</returns>
        </member>
        <member name="M:App1.EpubReader.Interfaces.IFiler.GetFilesPaths(App1.Infrastructure.FileExtension)">
            <summary>
            This method returns names of the files which have a given extension.
            </summary>
            <param name="fileExtensions">The extension of the file.</param>
            <returns>Returns names of the files with their extensions.</returns>
        </member>
    </members>
</doc>
